name: Release builds and images

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  APP_NAME: svc-downloader
  MAIN_PKG: ./cmd/server

jobs:
  build-matrix:
    name: Build binaries (${{ matrix.goos }}-${{ matrix.goarch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.25.1'
          check-latest: true
          cache: true

      - name: Derive version from tag
        id: ver
        run: |
          TAG=${GITHUB_REF_NAME}
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Build
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          BIN_NAME=${APP_NAME}
          EXT=""
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
          OUT=dist/${APP_NAME}_${{ steps.ver.outputs.version }}_${GOOS}_${GOARCH}${EXT}
          echo "Building $OUT"
          go mod download
          go build -trimpath -ldflags="-s -w" -o "$OUT" "$MAIN_PKG"

      - name: Package archive
        run: |
          cd dist
          GOOS=${{ matrix.goos }}
          GOARCH=${{ matrix.goarch }}
          VER=${{ steps.ver.outputs.version }}
          EXT=""
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
          BIN=${APP_NAME}_${VER}_${GOOS}_${GOARCH}${EXT}
          PKG=${APP_NAME}_${VER}_${GOOS}_${GOARCH}
          ls ../LICENSE >/dev/null 2>&1 && cp ../LICENSE . || true
          ls ../README.md >/dev/null 2>&1 && cp ../README.md . || true
          if [ "$GOOS" = "windows" ]; then
            zip -9 ${PKG}.zip ${BIN} LICENSE README.md 2>/dev/null || zip -9 ${PKG}.zip ${BIN}
            sha256sum ${PKG}.zip > ${PKG}.zip.sha256
          else
            tar czf ${PKG}.tar.gz ${BIN} LICENSE README.md 2>/dev/null || tar czf ${PKG}.tar.gz ${BIN}
            sha256sum ${PKG}.tar.gz > ${PKG}.tar.gz.sha256
          fi

      - name: Upload artifact (for aggregation)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.sha256
          if-no-files-found: error

  macos-universal:
    name: Build macOS universal binary
    runs-on: macos-latest
    needs: build-matrix
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.25.1'
          check-latest: true
          cache: true

      - name: Derive version from tag
        id: ver
        run: |
          TAG=${GITHUB_REF_NAME}
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Build arm64 and amd64
        env:
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          for ARCH in amd64 arm64; do
            GOOS=darwin GOARCH=$ARCH go build -trimpath -ldflags="-s -w" -o dist/${APP_NAME}_darwin_$ARCH "$MAIN_PKG"
          done

      - name: Create universal binary
        run: |
          lipo -create -output dist/${APP_NAME} dist/${APP_NAME}_darwin_amd64 dist/${APP_NAME}_darwin_arm64

      - name: Package universal archive
        run: |
          cd dist
          VER=${{ steps.ver.outputs.version }}
          PKG=${APP_NAME}_${VER}_darwin_universal
          mv ${APP_NAME} ${APP_NAME}_${VER}_darwin_universal
          ls ../LICENSE >/dev/null 2>&1 && cp ../LICENSE . || true
          ls ../README.md >/dev/null 2>&1 && cp ../README.md . || true
          zip -9 ${PKG}.zip ${APP_NAME}_${VER}_darwin_universal LICENSE README.md 2>/dev/null || zip -9 ${PKG}.zip ${APP_NAME}_${VER}_darwin_universal
          shasum -a 256 ${PKG}.zip > ${PKG}.zip.sha256

      - name: Upload artifact (universal)
        uses: actions/upload-artifact@v4
        with:
          name: darwin-universal
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.sha256
          if-no-files-found: error

  docker:
    name: Build and push multi-arch Docker image
    runs-on: ubuntu-latest
    needs: build-matrix
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Derive version and image tags
        id: meta
        run: |
          TAG=${GITHUB_REF_NAME}
          VER=${TAG#v}
          echo "version=${VER}" >> $GITHUB_OUTPUT
          echo "tag_v=${TAG}" >> $GITHUB_OUTPUT
          OWNER_REPO=${GITHUB_REPOSITORY,,}
          echo "ghcr=ghcr.io/${OWNER_REPO}:${TAG}" >> $GITHUB_OUTPUT
          echo "ghcr_latest=ghcr.io/${OWNER_REPO}:latest" >> $GITHUB_OUTPUT
          echo "image_name=${OWNER_REPO##*/}" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub (optional)
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            APP_NAME=${{ env.APP_NAME }}
            MAIN_PKG=${{ env.MAIN_PKG }}
          tags: |
            ${{ steps.meta.outputs.ghcr }}
            ${{ steps.meta.outputs.ghcr_latest }}
          labels: |
            org.opencontainers.image.title=${{ env.APP_NAME }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare dist dir
        run: mkdir -p dist

      - name: Export multi-arch image as OCI archive
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          build-args: |
            APP_NAME=${{ env.APP_NAME }}
            MAIN_PKG=${{ env.MAIN_PKG }}
          tags: |
            ${{ steps.meta.outputs.ghcr }}
          outputs: type=oci,dest=./dist/${{ env.APP_NAME }}_${{ steps.meta.outputs.version }}_docker_multi-arch.oci.tar
          cache-from: type=gha

      - name: Checksum OCI archive
        run: sha256sum dist/${{ env.APP_NAME }}_${{ steps.meta.outputs.version }}_docker_multi-arch.oci.tar > dist/${{ env.APP_NAME }}_${{ steps.meta.outputs.version }}_docker_multi-arch.oci.tar.sha256

      - name: Upload artifact (docker image)
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: |
            dist/*.oci.tar
            dist/*.sha256
            dist/*.tar.gz
            dist/*.zip
          if-no-files-found: error

  publish:
    name: Attach assets to release
    runs-on: ubuntu-latest
    needs: [build-matrix, macos-universal, docker]
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
          name: |
            linux-amd64
            linux-arm64
            windows-amd64
            windows-arm64
            darwin-amd64
            darwin-arm64
            darwin-universal
            docker-image

      - name: List artifacts
        run: ls -R dist

      - name: Combine checksums
        run: |
          cd dist
          cat *.sha256 > checksums.txt

      - name: Upload assets to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.oci.tar
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
